char = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ ASCII_DIGIT }

type = {
	"bool"
    | "float"
    | "int"
    | "string"
    | "char"
    | "void"
}

type_annotation = _{
	":"
    ~ space*
    ~ type
}

float = { digit* ~ "." ~ digit+ }
integer = { digit+ }
character = { "'" ~ char ~ "'" }
bool = { "true" | "false" }

identifier = { char ~ (digit | char)* }

expression = {
	float
    | integer
    | character
    | bool
    | identifier
}

space = _{ " " }

let = {
	"let"
    ~ space+
    ~ identifier
    ~ space*
    ~ type_annotation
    ~ space*
    ~ "="
    ~ space+
    ~ expression
}

function_body = {
	"{"
    ~
    ( statement
    | whitespace
    )*
    ~ "}"
}

function_param = {
	identifier
	~ space*
	~ type_annotation
	~ space*
}

function_param_list = _{
	"("
    ~ space*
    ~ (function_param
    ~ ("," ~ function_param)*)?
    ~ space*
    ~ ")"
}

function = {
	"fn"
    ~ space+
    ~ identifier
    ~ space*
    ~ function_param_list
    ~ space*
    ~ "->"
    ~ space*
    ~ type
    ~ space*
    ~ function_body
}

semicolon_ended_statement = {
	( let
    )
    ~ ";"
}

statement = {
	semicolon_ended_statement
    | function
}

whitespace = _{ (space | "\t" | "\r" | "\n") }
program = {
	(statement | whitespace)*
}

